#!/usr/bin/env bash

BUILD_IMAGE="${BUILD_IMAGE:-ruby-builder}"
BUILD_PREFIX="${BUILD_PREFIX:-ruby-build-}"
VERSIONS="${VERSIONS:-versions/*}"

build-ruby() {
  declare desc="Build Ruby binary tarballs"
  declare version_files="${@:-$VERSIONS}"
  : ${version_files:?}

  if [[ -z $(which docker) ]]; then
    echo "Missing docker client which is required for building"
    exit 2
  fi

  docker build -t "$BUILD_IMAGE" builder

  for folder in $version_files; do
    local tags="$(cat $folder/tags)"
    local release="$(basename $folder)"
    local build="${BUILD_PREFIX}${release}"

    : ${build:?} ${tags:?} ${release:?}

    docker rm "$build" || true
    docker run \
      --name "$build" \
      "$BUILD_IMAGE" builder $release /usr/local/rubies
    docker cp "$build":/usr/local/rubies/packaged/$release.tar $folder
    mv $folder/$release.tar $folder/ruby.tar
    cp template/Dockerfile $folder/Dockerfile

    docker rm "$build" || true
  done
}

build-images() {
  declare desc="Build Ruby Docker images"
  declare version_files="${@:-$VERSIONS}"
  : ${version_files:?}

  echo $version_files

  for folder in $version_files; do
    local tags="$(cat $folder/tags)"
    local master="ruby-image:master"

    docker build -t "$master" "$folder"

    for tag in $tags; do
      echo docker tag -f "$master" "$tag"
    done
  done
}

test() {
  declare desc="Run tests against images"
  declare version_files="${@:-$VERSIONS}"
  local master="$(echo $PREFIXES | cut -d' ' -f1)"
  for file in $version_files; do
    local tag="$(head -1 $file)"
    if $(docker inspect "$master":"$tag" >/dev/null 2>&1); then
      docker run "$master":"$tag" apk add --update openssl || exit 1
    fi
  done
}

main() {
  set -eo pipefail; [[ "$TRACE" ]] && set -x
  cmd="$1"
  case "$cmd" in
    test)		shift; test $@;;
    rubies)	shift; build-ruby $@;;
    images) shift; build-images $@;;
  esac
}

main "$@"
